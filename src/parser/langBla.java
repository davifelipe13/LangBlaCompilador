/* Generated By:JavaCC: Do not edit this line. langBla.java */
package parser;
import java.io.*;
import recovery.*; //importa as classes de recuperação de erros do AS=import syntacticTree.*; //importa as classes dos nós da árvore sintáticaimport semanalysis.*;   // importa as classes para a análise semântica
public class langBla implements langBlaConstants {

        final static String Version = "B+- Compiler - Version 1.0 - 2018";
        int contParseError = 0;           // contador de erros sintáticos        boolean debug_recovery;   // controla verbose de recuperação de erros        Token lastError = null;


// Define o método "main" da classe langBla.  public  static void main(String args[]) throws ParseException
  {
          boolean debug_as = false;
          boolean debug_recovery = false;
          boolean print_tree = false;

    String filename = ""; // nome do arquivo a ser analisado    langBla parser;     // analisador léxico/sintático    int i;
    boolean ms = false;

    System.out.println(Version);
    // lê os parâmetros passados para o compilador    for (i = 0; i < args.length - 1; i++)
    {
        if (args[i].equals("-debug_AS") )
            debug_as = true;
        else
        if (args[i].equals("-debug_recovery") )
            debug_recovery = true;
        else
        if (args[i].equals("-print_tree"))
                print_tree = true;
        else
        {
            System.out.println("Usage is: java langBla [-debug_AS] " +
             "[-debug_recovery] [-print_tree] inputfile");
            System.exit(0);
        }
    }

    if (args[i].equals("-"))
    {       // lê da entrada padrão        System.out.println("Reading from standard input . . .");
        parser = new langBla(System.in); // cria AS     }
     else
    {       // lê do arquivo        filename = args[args.length-1];
        System.out.println("Reading from file " + filename + " . . .");
        try {  // cria AS            parser = new langBla(new java.io.FileInputStream(filename));
        }
        catch (java.io.FileNotFoundException e) {
               System.out.println("File " + filename + " not found.");
        return;
        }
    }

        ListNode root = null;
    parser.debug_recovery = debug_recovery;
    if (! debug_as) parser.disable_tracing(); // desab. verbose do AS    try {
        root = parser.program();   // chama o método que faz a análise    }
    catch (ParseEOFException e)
    {
    System.err.println(e.getMessage());
    }
    finally {
        System.out.println(parser.token_source.foundLexError() +
                                " Lexical Errors found");
        System.out.println(parser.contParseError + " Syntactic Errors found");
     }

        // verifica se pode operar sobre a árvore sintática         if ( parser.token_source.foundLexError()
               + parser.contParseError == 0)
         {
             if (print_tree) // exibir a árvore             {
                 PrintTree prt = new PrintTree();
                 prt.printRoot(root);     // chama método para imprimir árvore             }
             ClassCheck tc = new ClassCheck();
             try {
                  tc.ClassCheckRoot(root);
                  System.out.println("0 Semantic Errors found");
             }
             catch (SemanticException e)
             {
                 System.out.println(e.getMessage());
             }
        }

        }  // main
        static public String im(int x)
        {
        int k;
        String s;
           s = tokenImage[x];
           k = s.lastIndexOf("\u005c"");
           try {s = s.substring(1,k);}
           catch (StringIndexOutOfBoundsException e)
           {}
           return s;
        }

        boolean eof;    // variável que indica se EOF foi alcançado        // o método abaixo consome tokens até alcançar um que pertença ao conjunto        // de sincronização
        void consumeUntil(RecoverySet g, ParseException e, String met) throws ParseEOFException, ParseException {
                Token tok;

           if ( debug_recovery) // informação sobre a recuperação           {
               System.out.println();
               System.out.println("*** " + met + " ***");
               System.out.println("     Syncronizing Set: " + g);
           }

           if (g == null) throw e; // se o conjunto é null, propaga a exceção
           tok = getToken(1); // pega token corrente           while ( ! eof )  // se não chegou ao fim do arquivo           {
                if ( g.contains(tok.kind ) ) //achou um token no conjunto                {
                     if ( debug_recovery)
                       System.out.println("     Found syncronizing token: " +
                                           im(tok.kind));
                     break;
                }
                if (debug_recovery)
                     System.out.println("     Ignoring token: " + im(tok.kind));
                getNextToken();     // pega próximo token                tok = getToken(1);
                if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?                    eof = true;
            }
           if ( tok != lastError)
           {
                System.out.println(e.getMessage());
                lastError = tok;
                contParseError++;  // incrementa número de erros           }
           if ( eof ) throw new ParseEOFException("EOF found prematurely.");
        }

  final public ListNode program() throws ParseException, ParseEOFException {
    trace_call("program");
    try {
RecoverySet g = First.program;

ListNode l = null, d = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
           {if (true) return null;}
        break;
      case CLASS:
        l = classlist(g);
        try {
          jj_consume_token(0);
             {if (true) return l;}
        } catch (ParseException e) {
       consumeUntil(g, e, "program");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 0:
        case CLASS:
          d = program();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
    {if (true) return l;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("program");
    }
  }

  final public ListNode classlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classlist");
    try {
ClassDeclNode c = null;
ListNode l = null;

RecoverySet f = First.classlist.union(g);
      c = classdecl(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        l = classlist(g);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
    {if (true) return new ListNode(c, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classlist");
    }
  }

  final public ClassDeclNode classdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classdecl");
    try {
Token t1 = null, t2 = null, t3 = null;
ClassBodyNode c1 = null;
      try {
        t1 = jj_consume_token(CLASS);
        t2 = jj_consume_token(IDENT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTENDS:
          jj_consume_token(EXTENDS);
          t3 = jj_consume_token(IDENT);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        c1 = classbody(g);
     {if (true) return new ClassDeclNode(t1, t2, t3, c1);}
      } catch (ParseException e) {
    consumeUntil(g, e, "classdecl");
    {if (true) return new ClassDeclNode(t1, t2, t3, c1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classdecl");
    }
  }

  final public ClassBodyNode classbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("classbody");
    try {
ListNode f = null;
Token t = null;

FirstCallNode fd = null;
      try {
        t = jj_consume_token(LBRACE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTRUCTOR:
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STRING:
        case IDENT:
          fd = firstcall(g);
                                if (f == null)
                                        f = new ListNode(fd);
                                else
                                        f.add(fd);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(RBRACE);
                 {if (true) return new ClassBodyNode(t, f);}
      } catch (ParseException e) {
        consumeUntil(g, e, "classbody");
        {if (true) return new ClassBodyNode(t, f);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classbody");
    }
  }

  final public FirstCallNode firstcall(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("firstcall");
    try {
  ListNode rc = null;
  Token t = null;

  FirstCallNode fd = null;
  RecursiveCallNode rd;

  RecoverySet f = new RecoverySet(SEMICOLON).union(g);
      rd = recursivecall(f);
            if (rc == null)
                rc = new ListNode(rd);
            else
                rc.add(rd);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTRUCTOR:
      case INT:
      case FLOAT:
      case BOOLEAN:
      case CHAR:
      case STRING:
      case IDENT:
        fd = firstcall(g);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
          {if (true) return new FirstCallNode(t, rc, fd);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("firstcall");
    }
  }

  final public RecursiveCallNode recursivecall(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("recursivecall");
    try {
ListNode atr = null,
                 v = null,
                 ct = null,
                 m = null;

AtribNode ad;
VarDeclNode vd;
ConstructDeclNode cd;
MethodDeclNode md;


Token t = null;

RecoverySet f2 = new RecoverySet(SEMICOLON).union(g).remove(IDENT),
            f3 = First.methoddecl.union(g).remove(IDENT),
            f4 = First.constructdecl.union(f3).remove(IDENT),
            f5 = First.vardecl.union(f4).remove(IDENT);
      try {
        if (jj_2_1(3)) {
          atribstat(f2);
          jj_consume_token(SEMICOLON);
                          if (atr == null)
                                atr = new ListNode(ad);
                        else
                                atr.add(ad);
        } else if (jj_2_2(3)) {
          vd = vardecl(f2);
          jj_consume_token(SEMICOLON);
                                  if ( v == null)
                                        v = new ListNode(vd);
                                else
                                        v.add(vd);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CONSTRUCTOR:
            cd = constructdecl(f4);
                                  if ( ct == null)
                                        ct = new ListNode(cd);
                                else
                                        ct.add(cd);
            break;
          case INT:
          case FLOAT:
          case BOOLEAN:
          case CHAR:
          case STRING:
          case IDENT:
            md = methoddecl(f3);
                                  if (m == null)
                                        m = new ListNode(md);
                                else
                                        m.add(md);
           {if (true) return new RecursiveCallNode(t, atr, v, ct, m);}
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                        consumeUntil(g, e, "recursivecall");
                        {if (true) return new RecursiveCallNode(t, atr, v, ct, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("recursivecall");
    }
  }

  final public VarDeclNode vardecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("vardecl");
    try {
Token t1 = null, t2;
int k = 0;
ListNode l = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          t1 = jj_consume_token(INT);
          break;
        case STRING:
          t1 = jj_consume_token(STRING);
          break;
        case IDENT:
          t1 = jj_consume_token(IDENT);
          break;
        case BOOLEAN:
          t1 = jj_consume_token(BOOLEAN);
          break;
        case FLOAT:
          t1 = jj_consume_token(FLOAT);
          break;
        case CHAR:
          t1 = jj_consume_token(CHAR);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        t2 = jj_consume_token(IDENT);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_1;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                          k++;
        }
       l = new ListNode(new VarNode(t2, k));
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_2;
          }
          jj_consume_token(COMMA);
              k = 0;
          t2 = jj_consume_token(IDENT);
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_3;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                                                               k++;
          }
       l.add(new VarNode(t2, k));
        }
    {if (true) return new VarDeclNode(t1, l);}
      } catch (ParseException e) {
   consumeUntil(g, e, "vardecl");
   {if (true) return new VarDeclNode(t1, l);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("vardecl");
    }
  }

  final public ConstructDeclNode constructdecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("constructdecl");
    try {
Token t = null;
MethodBodyNode m = null;
      try {
        t = jj_consume_token(CONSTRUCTOR);
        m = methodbody(g);
         {if (true) return new ConstructDeclNode(t, m);}
      } catch (ParseException e) {
   consumeUntil(g, e, "constructdecl");
   {if (true) return new ConstructDeclNode(t, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("constructdecl");
    }
  }

  final public MethodDeclNode methoddecl(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methoddecl");
    try {
Token t1 = null,
      t2 = null;
int k = 0;
MethodBodyNode m = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          t1 = jj_consume_token(INT);
          break;
        case STRING:
          t1 = jj_consume_token(STRING);
          break;
        case IDENT:
          t1 = jj_consume_token(IDENT);
          break;
        case BOOLEAN:
          t1 = jj_consume_token(BOOLEAN);
          break;
        case FLOAT:
          t1 = jj_consume_token(FLOAT);
          break;
        case CHAR:
          t1 = jj_consume_token(CHAR);
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_4;
          }
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                            k++;
        }
        t2 = jj_consume_token(IDENT);
        m = methodbody(g);
        {if (true) return new MethodDeclNode(t1, k, t2, m);}
      } catch (ParseException e) {
   consumeUntil(g, e, "methoddecl");
   {if (true) return new MethodDeclNode(t1, k, t2, m);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("methoddecl");
    }
  }

  final public MethodBodyNode methodbody(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("methodbody");
    try {
Token t1 = null;
ListNode l = null;
StatementNode s = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        t1 = jj_consume_token(LPAREN);
        l = paramlist(f);
        jj_consume_token(RPAREN);
        s = statement(g);
        {if (true) return new MethodBodyNode(t1, l, s);}
      } catch (ParseException e) {
   consumeUntil(g, e, "methodbody");
   {if (true) return new MethodBodyNode(t1, l, s);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("methodbody");
    }
  }

  final public ListNode paramlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("paramlist");
    try {
ListNode p = null, q = null;
int k = 0;
Token t1 = null;
Token t2 = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STRING:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            t1 = jj_consume_token(INT);
            break;
          case STRING:
            t1 = jj_consume_token(STRING);
            break;
          case IDENT:
            t1 = jj_consume_token(IDENT);
            break;
          case BOOLEAN:
            t1 = jj_consume_token(BOOLEAN);
            break;
          case FLOAT:
            t1 = jj_consume_token(FLOAT);
            break;
          case CHAR:
            t1 = jj_consume_token(CHAR);
            break;
          default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          t2 = jj_consume_token(IDENT);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_5;
            }
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
                             k++;
          }
         q = new ListNode(new VarNode(t2, k));
     p = new ListNode(new VarDeclNode(t1, q));
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[15] = jj_gen;
              break label_6;
            }
            jj_consume_token(COMMA);
                 k = 0;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INT:
              t1 = jj_consume_token(INT);
              break;
            case STRING:
              t1 = jj_consume_token(STRING);
              break;
            case IDENT:
              t1 = jj_consume_token(IDENT);
              break;
            default:
              jj_la1[16] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            t2 = jj_consume_token(IDENT);
            label_7:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case LBRACKET:
                ;
                break;
              default:
                jj_la1[17] = jj_gen;
                break label_7;
              }
              jj_consume_token(LBRACKET);
              jj_consume_token(RBRACKET);
                                            k ++;
            }
         q = new ListNode(new VarNode(t2, k));
         p.add(new VarDeclNode(t1, q));
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
       {if (true) return p;}
      } catch (ParseException e) {
   consumeUntil(g, e, "paramlist");
   {if (true) return null;}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("paramlist");
    }
  }

  final public void atribstatparamlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("atribstatparamlist");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          alocexpression(g);
          break;
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case int_constant:
        case float_constant:
        case boolean_constant:
        case string_constant:
        case char_constant:
        case null_constant:
        case IDENT:
          expression(g);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
    } finally {
      trace_return("atribstatparamlist");
    }
  }

  final public StatementNode statement(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statement");
    try {
StatementNode s = null;
ListNode l;
Token t1 = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g).remove(IDENT);
RecoverySet f2 = new RecoverySet(LBRACE).union(g).remove(IDENT);
      try {
        if (jj_2_3(2)) {
          s = vardecl(f1);
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENT:
            s = atribstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case PRINT:
            s = printstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case READ:
            s = readstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case RETURN:
            s = returnstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case SUPER:
            s = superstat(f1);
            jj_consume_token(SEMICOLON);
            break;
          case IF:
            s = ifstat(g);
            break;
          case FOR:
            s = forstat(g);
            break;
          case LBRACE:
            t1 = jj_consume_token(LBRACE);
            l = statlist(f2);
            jj_consume_token(RBRACE);
                                              s = new BlockNode(t1, l);
            break;
          case BREAK:
            t1 = jj_consume_token(BREAK);
            jj_consume_token(SEMICOLON);
                               s = new BreakNode(t1);
            break;
          case SEMICOLON:
            t1 = jj_consume_token(SEMICOLON);
                       s = new NopNode(t1);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
    {if (true) return s;}
      } catch (ParseException e) {
   consumeUntil(g, e, "statement");
   {if (true) return new NopNode(t1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statement");
    }
  }

  final public AtribNode atribstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("atribstat");
    try {
ExpreNode e1 = null, e2 = null;
Token t1 = null;

RecoverySet f1 = new RecoverySet(ASSIGN).union(g);
      try {
        e1 = lvalue(f1);
        t1 = jj_consume_token(ASSIGN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          e2 = alocexpression(g);
          break;
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case int_constant:
        case float_constant:
        case boolean_constant:
        case string_constant:
        case char_constant:
        case null_constant:
        case IDENT:
          e2 = expression(g);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      {if (true) return new AtribNode(t1, e1, e2);}
      } catch (ParseException e) {
   consumeUntil(g, e, "atribstat");
   {if (true) return new AtribNode(t1, e1, e2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("atribstat");
    }
  }

  final public PrintNode printstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("printstat");
    try {
ExpreNode e1 = null;
Token t = null;
      try {
        t = jj_consume_token(PRINT);
        e1 = expression(g);
        {if (true) return new PrintNode(t, e1);}
      } catch (ParseException e) {
   consumeUntil(g, e, "printstat");
   {if (true) return new PrintNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("printstat");
    }
  }

  final public ReadNode readstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("readstat");
    try {
ExpreNode e1 = null;
Token t = null;
      try {
        t = jj_consume_token(READ);
        e1 = lvalue(g);
        {if (true) return new ReadNode(t, e1);}
      } catch (ParseException e) {
   consumeUntil(g, e, "readstat");
   {if (true) return new ReadNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("readstat");
    }
  }

  final public ReturnNode returnstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("returnstat");
    try {
ExpreNode e1 = null;
Token t = null;
      try {
        t = jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case int_constant:
        case float_constant:
        case boolean_constant:
        case string_constant:
        case char_constant:
        case null_constant:
        case IDENT:
          e1 = expression(g);
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
        {if (true) return new ReturnNode(t, e1);}
      } catch (ParseException e) {
   consumeUntil(g, e, "returnstat");
   {if (true) return new ReturnNode(t, e1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("returnstat");
    }
  }

  final public SuperNode superstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("superstat");
    try {
ListNode l = null;
Token t = null;

RecoverySet f = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(SUPER);
        jj_consume_token(LPAREN);
        l = arglist(f);
        jj_consume_token(RPAREN);
        {if (true) return new SuperNode(t, l);}
      } catch (ParseException e) {
   consumeUntil(g, e, "superstat");
   {if (true) return new SuperNode(t, l);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("superstat");
    }
  }

  final public IfNode ifstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("ifstat");
    try {
ExpreNode e1 = null;
StatementNode s1 = null,
              s2 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(ELSE).union(g);
      try {
        t = jj_consume_token(IF);
        jj_consume_token(LPAREN);
        e1 = expression(f1);
        jj_consume_token(RPAREN);
        s1 = statement(f2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          s2 = statement(g);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
       {if (true) return new IfNode(t, e1, s1, s2);}
      } catch (ParseException e) {
   consumeUntil(g, e, "ifstat");
   {if (true) return new IfNode(t, e1, s1, s2);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ifstat");
    }
  }

  final public ForNode forstat(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("forstat");
    try {
AtribNode s1 = null,
          s2 = null;
StatementNode s3 = null;
ExpreNode e1 = null;
Token t = null;

RecoverySet f1 = new RecoverySet(SEMICOLON).union(g),
            f2 = new RecoverySet(RPAREN).union(g);
      try {
        t = jj_consume_token(FOR);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          s1 = atribstat(f1);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case NOT:
        case LPAREN:
        case int_constant:
        case float_constant:
        case boolean_constant:
        case string_constant:
        case char_constant:
        case null_constant:
        case IDENT:
          e1 = expression(f1);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENT:
          s2 = atribstat(f2);
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        s3 = statement(g);
     {if (true) return new ForNode(t, e1, s1, s2, s3);}
      } catch (ParseException e) {
   consumeUntil(g, e, "forstat");
   {if (true) return new ForNode(t, e1, s1, s2, s3);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("forstat");
    }
  }

  final public ListNode statlist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("statlist");
    try {
ListNode l = null;
StatementNode s = null;

RecoverySet f = First.statlist.remove(IDENT).union(g);
      s = statement(f);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case FOR:
      case IF:
      case INT:
      case FLOAT:
      case BOOLEAN:
      case CHAR:
      case PRINT:
      case READ:
      case RETURN:
      case STRING:
      case SUPER:
      case LBRACE:
      case SEMICOLON:
      case IDENT:
        l = statlist(g);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      {if (true) return new ListNode(s, l);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("statlist");
    }
  }

  final public ExpreNode lvalue(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("lvalue");
    try {
ExpreNode e1 = null,
          e2 = null;
Token t1 = null,
      t2 = null;
ListNode l = null;
      try {
        t1 = jj_consume_token(IDENT);
                  e1 = new VarNode(t1);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
          case DOT:
            ;
            break;
          default:
            jj_la1[29] = jj_gen;
            break label_8;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            t1 = jj_consume_token(LBRACKET);
            e2 = expression(null);
            jj_consume_token(RBRACKET);
           e1 = new IndexNode(t1, e1, e2);
            break;
          default:
            jj_la1[30] = jj_gen;
            if (jj_2_4(3)) {
              t1 = jj_consume_token(DOT);
              t2 = jj_consume_token(IDENT);
              jj_consume_token(LPAREN);
              l = arglist(null);
              jj_consume_token(RPAREN);
           e1 = new CallNode(t1, e1, t2, l);
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case DOT:
                t1 = jj_consume_token(DOT);
                t2 = jj_consume_token(IDENT);
           e1 = new DotNode(t1, e1, t2);
                break;
              default:
                jj_la1[31] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
     {if (true) return e1;}
      } catch (ParseException e) {
   consumeUntil(g, e, "lvalue");
   {if (true) return new VarNode(t1);}
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("lvalue");
    }
  }

  final public ExpreNode alocexpression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("alocexpression");
    try {
ExpreNode e1 = null,
          e2 = null;
ListNode l = null;
Token t1, t2;

RecoverySet f1 = new RecoverySet(RPAREN).union(g),
            f2 = new RecoverySet(RBRACKET).union(g);
      t1 = jj_consume_token(NEW);
      if (jj_2_5(2)) {
        t2 = jj_consume_token(IDENT);
        jj_consume_token(LPAREN);
        l = arglist(f1);
        jj_consume_token(RPAREN);
           e1 = new NewObjectNode(t1, t2, l);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case FLOAT:
        case BOOLEAN:
        case CHAR:
        case STRING:
        case IDENT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INT:
            t2 = jj_consume_token(INT);
            break;
          case STRING:
            t2 = jj_consume_token(STRING);
            break;
          case IDENT:
            t2 = jj_consume_token(IDENT);
            break;
          case BOOLEAN:
            t2 = jj_consume_token(BOOLEAN);
            break;
          case FLOAT:
            t2 = jj_consume_token(FLOAT);
            break;
          case CHAR:
            t2 = jj_consume_token(CHAR);
            break;
          default:
            jj_la1[32] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          label_9:
          while (true) {
            jj_consume_token(LBRACKET);
            e2 = expression(f2);
            jj_consume_token(RBRACKET);
                if ( l == null )
                   l = new ListNode(e2);
                else
                   l.add(e2);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LBRACKET:
              ;
              break;
            default:
              jj_la1[33] = jj_gen;
              break label_9;
            }
          }
            e1 = new NewArrayNode(t1, t2, l);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("alocexpression");
    }
  }

//LIVRO PROGRAM 4.13  final public void firstprecedence() throws ParseException, ParseEOFException {
    trace_call("firstprecedence");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      fourthprecedence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case XOR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XOR:
          jj_consume_token(XOR);
          break;
        case OR:
          jj_consume_token(OR);
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        fourthprecedence();
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
    } finally {
      trace_return("firstprecedence");
    }
  }

  final public void fourthprecedence() throws ParseException, ParseEOFException {
    trace_call("fourthprecedence");
    try {
      thirdprecedence();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case LE:
      case GE:
      case NEQ:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          jj_consume_token(LT);
          break;
        case GT:
          jj_consume_token(GT);
          break;
        case LE:
          jj_consume_token(LE);
          break;
        case GE:
          jj_consume_token(GE);
          break;
        case EQ:
          jj_consume_token(EQ);
          break;
        case NEQ:
          jj_consume_token(NEQ);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        thirdprecedence();
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } finally {
      trace_return("fourthprecedence");
    }
  }

  final public ExpreNode expression(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("expression");
    try {
      try {
        firstprecedence();
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AND:
            ;
            break;
          default:
            jj_la1[41] = jj_gen;
            break label_10;
          }
          jj_consume_token(AND);
          firstprecedence();
        }
      } catch (ParseException e) {
   consumeUntil(g, e, "expression");
      }
    } finally {
      trace_return("expression");
    }
  }

  final public void numexpr() throws ParseException, ParseEOFException {
    trace_call("numexpr");
    try {
      term();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        term();
      }
    } finally {
      trace_return("numexpr");
    }
  }

  final public void term() throws ParseException, ParseEOFException {
    trace_call("term");
    try {
      unaryexpr();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case REM:
          ;
          break;
        default:
          jj_la1[44] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
      }
    } finally {
      trace_return("term");
    }
  }

  final public void thirdprecedence() throws ParseException, ParseEOFException {
    trace_call("thirdprecedence");
    try {
      secondprecedence();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[46] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        secondprecedence();
      }
    } finally {
      trace_return("thirdprecedence");
    }
  }

  final public void secondprecedence() throws ParseException, ParseEOFException {
    trace_call("secondprecedence");
    try {
      unaryexpr();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
        case DIVIDE:
        case REM:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTIPLY:
          jj_consume_token(MULTIPLY);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case REM:
          jj_consume_token(REM);
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        unaryexpr();
      }
    } finally {
      trace_return("secondprecedence");
    }
  }

  final public void unaryexpr() throws ParseException, ParseEOFException {
    trace_call("unaryexpr");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      factor();
    } finally {
      trace_return("unaryexpr");
    }
  }

  final public void factor() throws ParseException, ParseEOFException {
    trace_call("factor");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_constant:
        jj_consume_token(int_constant);
        break;
      case string_constant:
        jj_consume_token(string_constant);
        break;
      case null_constant:
        jj_consume_token(null_constant);
        break;
      case char_constant:
        jj_consume_token(char_constant);
        break;
      case float_constant:
        jj_consume_token(float_constant);
        break;
      case boolean_constant:
        jj_consume_token(boolean_constant);
        break;
      case IDENT:
        lvalue(null);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        expression(null);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("factor");
    }
  }

  final public ListNode arglist(RecoverySet g) throws ParseException, ParseEOFException {
    trace_call("arglist");
    try {
ListNode l = null;
ExpreNode e = null;

RecoverySet f =  new RecoverySet(COMMA).union(g);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
      case NOT:
      case LPAREN:
      case int_constant:
      case float_constant:
      case boolean_constant:
      case string_constant:
      case char_constant:
      case null_constant:
      case IDENT:
        e = expression(f);
            l = new ListNode(e);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_15;
          }
          jj_consume_token(COMMA);
          e = expression(f);
            l.add(e);
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("arglist");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (!jj_rescan) trace_call("lvalue(LOOKING AHEAD...)");
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_23()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("lvalue(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_17() {
    if (!jj_rescan) trace_call("vardecl(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    if (jj_scan_token(IDENT)) { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_21()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("vardecl(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (!jj_rescan) trace_call("alocexpression(LOOKING AHEAD...)");
    if (jj_scan_token(NEW)) { if (!jj_rescan) trace_return("alocexpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("alocexpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_34() {
    if (!jj_rescan) trace_call("factor(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) { if (!jj_rescan) trace_return("factor(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("factor(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_19() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (!jj_rescan) trace_call("unaryexpr(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) jj_scanpos = xsp;
    if (jj_3R_34()) { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("unaryexpr(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_25() {
    if (!jj_rescan) trace_call("expression(LOOKING AHEAD...)");
    if (jj_3R_28()) { if (!jj_rescan) trace_return("expression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("expression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_16() {
    if (!jj_rescan) trace_call("atribstat(LOOKING AHEAD...)");
    if (jj_3R_18()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(ASSIGN)) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("atribstat(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_31() {
    if (!jj_rescan) trace_call("secondprecedence(LOOKING AHEAD...)");
    if (jj_3R_32()) { if (!jj_rescan) trace_return("secondprecedence(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("secondprecedence(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_29() {
    if (!jj_rescan) trace_call("fourthprecedence(LOOKING AHEAD...)");
    if (jj_3R_30()) { if (!jj_rescan) trace_return("fourthprecedence(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("fourthprecedence(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (!jj_rescan) trace_call("thirdprecedence(LOOKING AHEAD...)");
    if (jj_3R_31()) { if (!jj_rescan) trace_return("thirdprecedence(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("thirdprecedence(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_20() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (!jj_rescan) trace_call("firstprecedence(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) jj_scanpos = xsp;
    if (jj_3R_29()) { if (!jj_rescan) trace_return("firstprecedence(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("firstprecedence(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public langBlaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2001,0x2001,0x2000,0x10000,0x8784000,0x8784000,0x8784000,0x8780000,0x0,0x0,0x0,0x8780000,0x0,0x8780000,0x0,0x0,0x8080000,0x0,0x8780000,0x800000,0x20000000,0x17061000,0x800000,0x0,0x8000,0x0,0x0,0x0,0x1f7e1000,0x0,0x0,0x0,0x8780000,0x0,0x8780000,0x0,0x0,0x0,0x0,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x10000000,0x20000,0x100000,0x20000,0x10000000,0x20000,0x10000000,0x20000,0x100000,0x10000000,0x20000,0x10000000,0x1fc04230,0x0,0x10088000,0x1fc04230,0x1fc04230,0x0,0x10000000,0x1fc04230,0x10000000,0x10088000,0x220000,0x20000,0x200000,0x10000000,0x20000,0x10000000,0x200,0x1800,0x200,0x1800,0xf,0xf,0x400,0x30,0x30,0x1c0,0x1c0,0x30,0x30,0x1c0,0x1c0,0x30,0x30,0x1fc04000,0x100000,0x1fc04230,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public langBla(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public langBla(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new langBlaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public langBla(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new langBlaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public langBla(langBlaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(langBlaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
